{"version":3,"sources":["components/Nav/Nav.js","components/Books/Books.js","components/Issue/Issue.js","components/Return/Return.js","components/search/search.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","state","update","bind","this","setState","id","src","alt","style","window","location","pathname","display","to","onClick","React","Component","Books","useState","scope","header","books","setBooks","useEffect","a","async","fetch","response","json","data","filteredBooks","filter","book","count","map","key","booksname","toUpperCase","author","bbk","fetchData","className","sem","document","getElementById","value","then","res","forEach","el","name","semester","issueIt","method","headers","body","JSON","stringify","sid","parseInt","disabled","type","placeholder","min","onChange","componentDidMount","Return","length","sname","date","deadline","returnIt","student","publisher","city","year","count_page","App","path","exact","strict","component","Issue","Search","from","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2d34415c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Nav.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Nav extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.update = this.update.bind(this);\r\n    }\r\n\r\n    state = {};\r\n\r\n    update() {\r\n        this.setState(this.state);\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div id='nav'>\r\n                <img src='../../logo50x50.png' alt=\"logo\" ></img>\r\n                <span id=\"navtext\">e-КАТАЛОГ</span>\r\n                <ul>\r\n                    <li style={window.location.pathname === '/' ? {display: 'none'} : {display: 'inline-block'}}><Link to='/' onClick={this.update}>Головна</Link></li>\r\n                    <li style={window.location.pathname === '/search' ? {display: 'none'} : {display: 'inline-block'}}><Link to='/search' onClick={this.update}>Пошук по назві</Link></li>\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Nav;","import React, { useState, useEffect } from 'react';\r\nimport './Books.css';\r\n\r\nconst Books = () => {\r\n    const [header] = useState(\r\n        <thead id=\"header\">\r\n            <tr>\r\n                <th scope=\"col\">Назва книги</th>\r\n                <th scope=\"col\">Автор</th>\r\n                <th scope=\"col\">Кількість</th>\r\n                <th scope=\"col\">BBK</th>\r\n            </tr>\r\n        </thead>\r\n    );\r\n\r\n    const [books, setBooks] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const response = await fetch(\"http://localhost:5000/api/books\");\r\n            const data = await response.json();\r\n            const filteredBooks = data.filter(book => book.count > 0);\r\n            setBooks(filteredBooks.map(book => (\r\n                <tr key={book.id}>\r\n                    <td>{book.booksname.toUpperCase()}</td>\r\n                    <td>{book.author}</td>\r\n                    <td>{book.count}</td>\r\n                    <td>{book.bbk}</td>\r\n                </tr>\r\n            )));\r\n        };\r\n        fetchData();\r\n    }, []);\r\n\r\n    return (\r\n        <div id='books'>\r\n            <span id=\"heading\">AVAILABLE BOOKS</span>\r\n            <table id=\"results\" className=\"table text-center table-hover\">\r\n                {header}\r\n                <tbody>\r\n                    {books}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Books;\r\n","import React from 'react';\r\nimport './Issue.css';\r\n\r\nclass Books extends React.Component {\r\n    \r\n    state = {\r\n        header: <thead></thead>,\r\n        books: []\r\n    };\r\n\r\n    fetchData = () => {\r\n        var sem = document.getElementById('select').value;\r\n        this.setState({header: <thead id=\"header\">\r\n                        <tr>\r\n                            <th scope=\"col\">Book Name</th>\r\n                            <th scope=\"col\">Author</th>\r\n                            <th scope=\"col\">Semester No</th>\r\n                            <th scope=\"col\"></th>\r\n                        </tr>\r\n                    </thead>,\r\n            books: []});\r\n\r\n        fetch(`/api/getBooks/${sem}`)\r\n            .then(res => res.json())\r\n            .then(books =>\r\n                books.forEach(\r\n                    el => this.setState({\r\n                        books: [...this.state.books, \r\n                                <tr key={el.id}>\r\n                                    <td>{el.name.toUpperCase()}</td>\r\n                                    <td>{el.author}</td>\r\n                                    <td>{el.semester}</td>\r\n                                    <td><button className=\"btn btn-primary\" onClick={() => this.issueIt(el)}>Issue</button></td>\r\n                                </tr>]\r\n                    })));\r\n    }\r\n    \r\n    componentDidMount() {\r\n        if(document.getElementById('id').value === '')\r\n            document.getElementById('select').disabled = true;\r\n        else\r\n            document.getElementById('select').disabled = false;\r\n    }\r\n\r\n    issueIt = el => {\r\n        fetch('/api/borrow', {\r\n                method: 'post',\r\n                headers: {'Content-Type':'application/json'},\r\n                body: JSON.stringify({\r\n                    ...el,\r\n                    sid: parseInt(document.getElementById('id').value)\r\n                })\r\n           });\r\n           /*.then(res => {\r\n                fetch('/api/borrowed')\r\n                .then(res => res.json())\r\n                .then(e => console.log(e));\r\n           });*/\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id='issue' className=\"text-center\">\r\n                <div>\r\n                    <input className=\"form-control sel\" type=\"number\" placeholder=\"Enter Student ID\" id=\"id\" min=\"1\" onChange={this.componentDidMount}></input>\r\n                    <select className=\"form-control sel\" id=\"select\">\r\n                        <option disabled>Select Semester</option>\r\n                        <option value=\"1\">1st Sem</option>\r\n                        <option value=\"2\">2nd Sem</option>\r\n                        <option value=\"3\">3rd Sem</option>\r\n                        <option value=\"4\">4th Sem</option>\r\n                        <option value=\"5\">5th Sem</option>\r\n                        <option value=\"6\">6th Sem</option>\r\n                        <option value=\"7\">7th Sem</option>\r\n                        <option value=\"8\">8th Sem</option>\r\n                    </select>\r\n                    <button className=\"btn btn-success\" onClick={this.fetchData}>Submit</button>\r\n                </div>\r\n                <table id=\"results\" className=\"table table-hover\">\r\n                    {this.state.header}\r\n                    <tbody>\r\n                        {this.state.books}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Books;","import React from 'react';\r\nimport './Return.css';\r\n\r\nclass Return extends React.Component {\r\n    \r\n    state = {\r\n        header: <thead></thead>,\r\n        books: [],\r\n        name: ''\r\n    };\r\n\r\n    fetchData = () => {\r\n        var sid = document.getElementById('sid').value;\r\n        this.setState({header: <thead id=\"header\">\r\n                        <tr>\r\n                            <th scope=\"col\">Book Name</th>\r\n                            <th scope=\"col\">Author</th>\r\n                            <th scope=\"col\">Semester No</th>\r\n                            <th scope=\"col\">Issue Date</th>\r\n                            <th scope=\"col\">Return Deadline</th>\r\n                            <th scope=\"col\"></th>\r\n                        </tr>\r\n                    </thead>,\r\n            books: []});\r\n\r\n        fetch(`/api/getIssues/${sid}`)\r\n            .then(res => res.json())\r\n            .then(books => {\r\n                if(books.length > 0) {\r\n                    this.setState({...this.state, name: `Books Issued By ${books[0].sname}`});\r\n                    books.forEach(\r\n                        el => this.setState({\r\n                            books: [...this.state.books, \r\n                                    <tr key={el.id}>\r\n                                        <td>{el.name.toUpperCase()}</td>\r\n                                        <td>{el.author}</td>\r\n                                        <td>{el.semester}</td>\r\n                                        <td>{el.date}</td>\r\n                                        <td>{el.deadline}</td>\r\n                                        <td><button className=\"btn btn-primary\" onClick={() => this.returnIt(el)}>Return</button></td>\r\n                                    </tr>]\r\n                        }))\r\n                }\r\n                else{\r\n                    this.setState({header: []});\r\n                    this.setState({...this.state, name: \"No Books Issued By The Student\"});\r\n                }\r\n                });\r\n    }\r\n\r\n    returnIt = el => {\r\n        fetch('/api/return', {\r\n                method: 'post',\r\n                headers: {'Content-Type':'application/json'},\r\n                body: JSON.stringify({\r\n                    ...el,\r\n                    sid: parseInt(document.getElementById('sid').value)\r\n                })\r\n           });\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id='return' className=\"text-center\">\r\n                <div>\r\n                    <input className=\"form-control sel\" type=\"number\" placeholder=\"Enter Student ID\" id=\"sid\" min=\"1\"></input>\r\n                    <button className=\"btn btn-success\" onClick={this.fetchData}>Submit</button>\r\n                </div><br/>\r\n                {this.state.name}\r\n                <table id=\"rResults\" className=\"table table-hover\">\r\n                    {this.state.header}\r\n                    <tbody>\r\n                        {this.state.books}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Return;","import React from 'react';\r\nimport './search.css';\r\n\r\nclass Books extends React.Component {\r\n    \r\n    state = {\r\n        header: <thead></thead>,\r\n        books: [],\r\n        name: ''\r\n    };\r\n\r\n    fetchData = () => {\r\n        var id = document.getElementById('id').value;\r\n        this.setState({header: <thead id=\"header\">\r\n                        <tr>\r\n                            <th scope=\"col\">Назва</th>\r\n                            <th scope=\"col\">Автор</th>\r\n                            <th scope=\"col\">Видання</th>\r\n                            <th scope=\"col\">Місто</th>                            \r\n                            <th scope=\"col\">Рік</th>\r\n                            <th scope=\"col\">К-сть сторінок</th>\r\n                        </tr>\r\n                    </thead>,\r\n            books: []});\r\n\r\n        fetch(`http://localhost:5000/api/books/search/${id}`)\r\n            .then(res => res.json())\r\n            .then(student => {\r\n                if(student.length > 0) {\r\n                    this.setState({...this.state, name: `Знайдено книги`});\r\n                    student.forEach(\r\n                        el => this.setState({\r\n                            books: [...this.state.books, \r\n                                    <tr key={el.id}>\r\n                                        <td>{el.booksname.toUpperCase()}</td>\r\n                                        <td>{el.author}</td>\r\n                                        <td>{el.publisher}</td>\r\n                                        <td>{el.city}</td>                                        \r\n                                        <td>{el.year}</td> \r\n                                        <td>{el.count_page}</td>                                                                               \r\n                                    </tr>]\r\n                        }))\r\n                }\r\n                else{\r\n                    this.setState({header: []});\r\n                    this.setState({...this.state, name: \"Жодної книги з такою назвою або подібною не знайдено\"});\r\n                }\r\n                });\r\n    }\r\n\r\n    returnIt = el => {\r\n        fetch('/api/return', {\r\n                method: 'post',\r\n                headers: {'Content-Type':'application/json'},\r\n                body: JSON.stringify({\r\n                    ...el,\r\n                    sid: parseInt(document.getElementById('sid').value)\r\n                })\r\n           });\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id='search' className=\"text-center\">\r\n                <div>\r\n                    <input className=\"form-control sel\" type=\"text\" placeholder=\"Введіть назву книги \" id=\"id\" ></input>\r\n                    <button className=\"btn btn-success\" onClick={this.fetchData}>Submit</button>\r\n                </div><br/>\r\n                {this.state.name}\r\n                <table id=\"sResults\" className=\"table table-hover\">\r\n                    {this.state.header}\r\n                    <tbody>\r\n                        {this.state.books}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Books;","import React from 'react';\r\nimport Nav from './components/Nav/Nav';\r\nimport Books from './components/Books/Books';\r\nimport Issue from './components/Issue/Issue';\r\nimport Return from './components/Return/Return';\r\nimport Search from './components/search/search';\r\nimport './App.css';\r\nimport {Route, Redirect, Switch} from 'react-router-dom';\r\n\r\nclass App extends React.Component {\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"App\">\r\n        <Nav />\r\n        <Switch>\r\n          <Route path='/' exact strict component={Books}/>\r\n          <Route path='/issue' exact strict component={Issue}/>\r\n          <Route path='/return' exact strict component={Return}/>\r\n          <Route path='/search' exact strict component={Search}/>\r\n          <Redirect from='*' to='/'/>\r\n        </Switch>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>\r\n, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}